<!DOCTYPE html>
<html lang="ko">
<head>문제 해결 패턴</head>
<body>
  <!--
    📌 Objectives
    1. 문제해결 패턴에 대해 알아본다.
      - 1-1. 빈도카운터 패턴
      - 1-2. 다중 포인터 패턴
      - 1-3. 기준점 간 이동 배열 패턴
      - 1-4. 분할과 정복 패턴
    2. 예시를 통해 순진한 접근법과 패턴을 사용한 접근법을 알아보며 비교해본다.
    3. 해결책을 응용하여 연습할 수 있는 기회를 가져본다.
  -->

  <!-- 
    ✅ 빈도 카운터 패턴
  -->
  🔹 빈도 카운터 패턴이 지닌 개념
    - 자바스크립트의 객체를 사용해서 다양한 값과 빈도를 수집하는 것
    - 값들이 서로 비슷한 값으로 구성되어 있는지, 서로 간의 애너그램인지, 값이 다른 값에 포함되는지 등을 알기 위해 비교하는 것
      (애너그램: 일종의 말장난으로 어떠한 단어의 문자를 재배열하여 다른 뜻을 가지는 단어로 바꾸는 것)
    - 대부분 객체를 사용한다.
    - 객체를 사용하여 프로파일을 구성하는 것은 배열이나 문자열같은 '선형 구조'의 내용을 분석하는 방법이다.

    <script>
      /**
        [문제1]

        same([1,2,3], [4,1,9]) // true
        same([1,2,3], [1,9]) // false
        same([1,2,1], [4,4,1]) // false
      */

      /**
        [순진한 접근법] 
        
        O(n2) 중첩 반복문 => 시간 복잡도가 사용된 간단한 해결책
      */
      const same = (numArr1, numArr2) => {
        let result = false;

        if (numArr1.length !== numArr2.length) return false;

        for (let num of numArr1) {
          // if (numArr2.includes(num2) ) {
          //   numArr2.splice(numArr2.findIndex((num) => num === num2), 1);
          //   result = true;
          // } else {
          //   result = false;
          //   break;
          // }
          
          /** NOTI: 여기서 indexOf는 전체 배열을 반복하기에 루프. 중첩 반복문이기에 On2(On)이 된다. */
          let correctIndex = numArr2.indexOf(num*num);

          if (correctIndex === -1) {
            result = false;
            break;
          }
          else {
            numArr2.splice(correctIndex, 1);
            result = true;
          }
        }

        return result;
      }
    
      /**
        [패턴을 사용한 접근법]

        On+3 차라리 반복문을 밖에서 여러개 전개해라
      */
      const same2 = (numArr1, numArr2) => {
        if (numArr1.length !== numArr2.length) return false;

        let frequencyCounter1 = {};
        let frequencyCounter2 = {};

        for (let value of numArr1) {
          frequencyCounter1[value] = (frequencyCounter1[value] || 0) + 1; // 해당 값을 key, 빈도를 value
        }

        for (let value of numArr2) {
          frequencyCounter2[value] = (frequencyCounter2[value] || 0) + 1; // 해당 값을 key, 빈도를 value
        }

        // NOTI: for in문은 key를 리턴, 배열의 경우 index 리턴
        for(let key in frequencyCounter1) {
          if (!(key ** 2 in frequencyCounter2)) {
            return false; // 값이 없으면 실패
          }
          if (frequencyCounter2[key ** 2] !== frequencyCounter1[key]) {
            return false; // 값은 있으나 빈도가 다르면 실패
          }
        }

        return true;
      }
    </script>

    <script>
      /**
        [문제2]

        validAnagram('', '') // true
        validAnagram('aaz', 'zza') // false
        validAnagram('anagram', 'nagaram') // true
        validAnagram('awesome', 'awesom') // false
        validAnagram('qwerty', 'qeywrt') //true
        validAnagram('texttwisttime', 'timetwisttext') //true
      */

      const validAnagram = (str1, str2) => { //'qwe', 'qwq'
        if (str1.length !== str2.length) return false;

        let frequencyCounter1 = {};
        let frequencyCounter2 = {};

        for (let val of str1) {
          frequencyCounter1[val] = (frequencyCounter1[val] || 0) + 1;
        }

        // for (let val of str2) {
        //   frequencyCounter2[val] = (frequencyCounter2[val] || 0) + 1;
        // }

        // for (let key in frequencyCounter1) {
        //   if (!frequencyCounter2[key]) return false; // 값 체크
        //   if (frequencyCounter1[key] !== frequencyCounter2[key]) return false; // 빈도 체크
        // }

        /** 위 두 단락을 합치면!? */
        for (let val of str2) {
          if (!frequencyCounter1[val]) return false; // 값 체크
          else frequencyCounter1[val] -= 1; // 빈도 조절
        }

        return true;
      }
    </script>

  <!-- 
    ✅ 다중 포인터 패턴
  -->
  🔹 다중 포인터 패턴이 지닌 개념
    - 인덱스나 위치에 해당하는 포인터나 값을 만든 후, 특정 조건에 따라 중간 지점에서부터 시작 지점이나 끝 지점이나 양쪽 지점을 향해 이동시키는 것
    - 배열이나 문자열같은 일종의 선형 구조나 이중 연결 리스트나 단일 연결 리스트를 만드는 것
    - 한 쌍의 값이나 조건을 충족시키는 무언가를 찾는 개념
    - 두 가지의 참조값을 사용한다.
    - 여기서 포인터는 인덱스나 특정 문자열을 가리킨다.

    <script>
      /**
        [문제1]

        sumZero([-3, -2, -1, 0, 1, 2, 3]) // [-3, 3]
        sumZero([-2, 0, 1, 3]) // undefined
        sumZero([1, 2, 3]) // undefined
      */

      /** [순진한 접근법] */
      const sumZero = (arr) => {
        for (let i = 0; i < arr.length; i++) {
          for (let j = i+1; j < arr.length; j++) {
            if (arr[i] + arr[j] === 0) {
              return [arr[i], arr[j]];
            }
            else return undefined;
          }
        }
      }

      /** [패턴을 사용한 접근법] */
      // NOTI: 다중포인터를 사용할 때에는 무조건 정렬이 되어 있어야 한다! arr.sort(function(a,b) => a - b);
      const sumZero2 = (arr) => {
        let left = 0;
        let right = arr.length - 1;

        // NOTI: 오른쪽 값이 '크다'라고 설정한 것은 0-0(본인-본인)이 되지 않게 하려고 [-4,-3,-2,-1,0,5,10] 케이스!
        while(left < right) { 
          let sum = arr[left] + arr[rigth];

          if (sum === 0) {
            return [arr[left], arr[rigth]];
          }
          else if (sum > 0) {
            rigth--;
          }
          else {
            left++;
          }
        }
      }
    </script>

    <script>
      /** 
        [고유값 세기 도전 과제]

        console.log(countUniqueValues([1,1,1,1,1,2])) // 2
        console.log(countUniqueValues([1,1,1,1,1,2,3])) // 2
        console.log(countUniqueValues([1,2,3,4,4,4,7,7,12,12,13])) // 7
        console.log(countUniqueValues([])) // 0
        console.log(countUniqueValues([-2,-1,-1,0,1])) // 4
        console.log(countUniqueValues([1,1,1,2,3,3,4,4,5,6])) // 4
      */
      
      /** [MY-SELF] 다중포인터 방법이 생각 안나서 빈도카운터로 풀어봤다 ㅠㅠ */
      const countUniqueValues = (numArr) => {
        let uniqueValues = {};

        for(num of numArr) {
          uniqueValues[num] = (num[num] || 0) + 1;
        }

        return Object.keys(uniqueValues).length;
      }


      /** [다중 포인터 사용 솔루션] */
      const countUniqueValuesUsingPointer = (numArr) => {
        // #region 설명 듣고 내가 짠 소스
        // let i = 0;
        // let j = i + 1;

        // if(numArr.length <= 1) return numArr.length;

        // while(j < numArr.length) {
        //   if(numArr[i] === numArr[j]) {
        //     j++;
        //   }
        //   else {
        //     i++
        //     numArr[i] = numArr[j]
        //     j++;
        //   }
        // }

        // return i + 1;
        // #endregion

        // #region 선생님 소스
        let i = 0;
        
        if(numArr.length <= 1) return numArr.length;

        for(let j = 1; j < numArr.length; j++) {
          if (numArr[i] !== numArr[j]) {
            i++;
            numArr[i] = numArr[j]
          }

          return i + 1;
        }
        // #endregion
      }
    </script>

  <!-- 
    ✅ 기준점 간 이동 배열 패턴 (슬라이딩 윈도우 패턴)
  -->
  🔹 기준점 간 이동 배열 패턴이 지닌 개념
    - 배열이나 문자열과 같은 일련의 데이터를 입력하거나, 특정 방식으로 연속적인 해당 데이터의 하위 집합을 찾는데 유용하다.
    - 창문을 하나 만들어야 한다. 변수, 하위 배열, 또는 다른 문자열도 될 수 있다. 조건에 따라 창문을 이동시키며 조건에 따라 왼-오, 오-왼, 중간에서 시작하여 끝 위치로 이동할 수 있다.
    - 때에 따라 새 창문을 만들기도 하는데, 예시를 통해 알아보겠다. 
    - 규모가 큰 데이터셋에서 데이터의 하위 집합을 추적하는 문제에 있어서 유용하다.

    <script>
      /** 
        [문제] 배열과 정수가 주어지면, 배열에서 정수의 숫자만큼의 요소를 순서대로 더해 가장 큰 값을 만들어내는 문제 

        maxSubarraySum([1,2,5,2,8,1,5], 2); // 10
        maxSubarraySum([1,2,5,2,8,1,5], 4); // 17
        maxSubarraySum([4, 2, 1, 6, 2], 4); // 13
        maxSubarraySum([], 4); // null
      */
     
      /** [순진한 접근법] */
      const maxSubarraySum = (arr, num) => {
        if (num > arr.length) return null;
        
        // -infinity ? 배열이 모두 음수로 구성되어 있다면 가장 큰 합은 여전히 음수일 것이다.
        // 양수로만 작업을 하지 않는 한 0에서 시작하는 것은 전혀 도움이 되지 않는다.
        let max = -Infinity;
  
        for (let i = 0; i < arr.length - num + 1; i++) {
          temp = 0;
  
          for (let j = 0; j < num; j++) {
            temp += arr[i + j];
          }
  
          if (temp > max) {
            max = temp;
          }
  
          return max;
        }
      }

    
      /** [슬라이딩 윈도우 패턴] */
      const maxSubarraySum2 = (arr, num) => {
        // [2,6,9,2,1,8,5,6,3]
        // 먼저 처음 연속으로 나오는 숫자를 num 만큼 더한 뒤, maxSum = 2+6+9
        // 그 값을 가지고 앞 숫자 빼기 & 뒷 숫자 더하기를 해서 나온 결과값으로 계속해서 비교해주는 방법 maxSum - 2 + 2
        
        let maxSum = 0;
        let tempSum = 0;

        if (arr.length < num) return null;

        for (let i = 0; i < num; i++) {
          maxSum += arr[i];
        }

        tempSum = maxSum;

        // NOTI: 아래 루프가 O(n) 에 해당한다.
        for (let i = num; i < arr.length; i++) {
          tempSum = tempSum, - arr[i - num] + arr[i];
          maxsum = Math.max(maxSum, tempSum);
        }

        return maxSum;
      }
    </script>

    <!-- 
      ✅ 분할 정복 패턴
    -->
    🔹 분할 정복 패턴이 지닌 개념
      - 주로 배열이나 문자열 같은 큰 규모의 데이터셋을 처리함
      - 연결리스트나 트리가 될 수 있음
      - 값을 찾기 위해 배열의 왼쪽에서 시작ㅎ여 오른쪽 끝까지 이동하는 것보다는 배열을 작은 조각으로 세분화하여 각 조각들을 어디로 이동시킬지 결정하는 작업

      <script>
        /** 
          [문제] 해당 값을 취하고 있는 인덱스를 찾는다.
          NOTI: 마찬가지로 정렬된 배열이어야 한다.

          search([1,2,3,4,5,6], 4); // 3
          search([1,2,3,4,5,6], 6); // 5
          search([1,2,3,4,5,6], 11); // -1
        */

        /** [순진한 접근법법] */
        const search = (arr, val) => {
          for(let i = 0; i < arr.length; i++) {
            if(arr[i] === val) return i;
          }

          return -1;
        }

        /** [분할정복 패턴을 사용한 방법 - 이진탐색] */
        const search2 = (arr, val) => {
          // search([1,2,3,4,5,6], 4); // 3

          let min = 0;
          let max = arr.length - 1;

          while (min <= max) {
            let middle = Math.floor((min + max) / 2);
            let currentElement = arr[middle];

            if (arr[middle] < val) {
              min = middle + 1;
            }
            else if (arr[middle] > val) {
              max = middle - 1;
            }
            else {
              return middle;
            }
          }

          return -1;
        }
      </script>

  <!-- 
    📌 Recap
  -->
</body>
</html>