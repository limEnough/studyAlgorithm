<!DOCTYPE html>
<html lang="ko">
<head>문제 해결 접근법</head>
<body>
  <!--
    📌 Objectives
    1. 알고리즘이란 무엇인지 알아본다.
    2. 알고리즘 문제 해결을 위한 접근법을 알아본다.
    3. 구체적 예시를 살펴본다.
  -->

  <!-- 
    ✅ 알고리즘의 정의
  -->
  🔹 알고리즘이란 무엇일까?
    - 알고리즘은 특정 작업을 달성하기 위한 과정이나 일련의 단계를 의미
    - 알고리즘은 문제를 해결하기 위해 수행해야 하는 일련의 수학적 단계

  🔹 왜 알고리즘을 알아야 할까?
    - 프로그래밍에서 수행하는 거의 모든 작업에는 아주 기본적인 작업이든 복잡한 애플리케이션을 구축하는 일이든 일종의 알고리즘이 포함된다.
  
  🔹 어떻게 해야 알고리즘을 더 잘 이해할 수 있을까?
    - 문제해결을 위한 계획을 수립한다.
    - 일반적인 문제 해결 패턴을 파악한다.


  <!-- 
    ✅ 알고리즘 문제 해결을 위한 접근법
  -->
  🔹 문제 해결 전략 수립
    - 문제를 이해한다.
    - 예시를 작성해본다. (단순/복잡)
    - 문제를 세분화한다.
    - 문제를 단순화한다.
    - 문제를 복습하고 재구성한다.

  🔹 문제를 이해한다.
    1. 문제를 나의 방식대로 바꿔서 말할 수 있는가? 
    2. 문제가 어떤 입력값을 가지고 있는가?
    3. 문제에 대한 출력값은 무엇인가? 어떤 형태인가?
    4. 입력값이 출력값을 결정할 수 있는가? 문제를 해결할 충분한 정보가 있는가?
    5. 문제에서 중요한 부분은 무엇이고 뭐라고 라벨링 할 수 있는가?

    <script>
      /** 
       Q. 두 숫자를 가지고 합계를 반환하는 함수를 작성해보자.

       1. 덧셈을 수행하는 함수
       2. 두 숫자 => 정수/부동소수점/숫자 크기의 상한...
       3. 정수인가? 문자형/숫자형인가?
       4. 누군가 한 숫자만 입력하면 어떻게 할 것인가? null 이나 숫자가 아닌 값이 들어오면?
       5. 입력값과 출력값
      */
    </script>


  🔹 문제를 세분화한다.

    <script>
      /** Q. 문자열을 입력하면 객체로 쪼개어 해당 문자를 카운트 해보자. */
      const charCount = (str) => {
        // 완료 후 반환할 값은 무엇인가
        let result = {};

        // 문자의 각 문자 요소에 반복문을 돌린다.
        for (let i = 0; i < str.length; i++) {
          // 소문자 대문자 구분할 것인가? 소문자만 취급할 것인가? 반환도 소문자로 할 것인가?
          let char = str[i].toLowerCase();

          // 해당 문자 요소(char)가 오브젝트 키로 이미 존재한다면, 해당 값에 +1 해준다.
          if (result[char] > 0) {
            result[char]++;
          }
          // 해당 문자 요소가 없다면, 해당 요소를 키값으로 갖는 오브젝트를 추가한다.
          else {
            result[char] = 1;
          }

          // 해당 요소가 문자 요소가 아니라면, (공백, 숫자 등..) 아무것도 하지 않는다.
        }

        return result;
      }
    </script>

  🔹 문제를 단순화, 복습, 재구성 한다.
      1. 코드가 제대로 작동하는가?
      2. 결과를 다른 방식으로 도출할 수 있는가?
      3. 한눈에 보고 이해할 수 있는가?
      4. 결과를 다른 문제에도 적용할 수 있는가?
      5. 해결책의 성능을 향살시킬 수 있는가? (시간복잡도/공간복잡도)
      6. 다른 사람들은 이 문제를 어떻게 생각하는가?

    <script>
      /** 방법 1 **/
      const charCountRefact = (str) => {
        let result = {};

        // ✅ 코드 단순화를 위해 for of 사용
        for (let char of str) {
          char = char.toLowerCase();

          // ✅ 문자열이 아니라면 수행하지 않음을 미리 밝힌다.
          if (/[a-z0-9]/.test(char)) {
            // ✅ 값이 있다면 추가하고 없다면 1로 설정. 값 = truthy || falsy
            // NOTI: 증가연산자(++) 앞에 있다면, 값을 증가시키고 증가 이후 값 반환. 뒤에 있다면 값을 증가시키고 증가 이전 값 반환
            // result[char] 없으면 undefined 나오고, 숫자가 아닌 값에 연산을 하니 최종값은 NaN
            result[char] = ++result[char] || 1;
          }
        }

        return result;
      }

      /** 방법 2
        정규표현식을 사용하면 그렇지 않았을 때 보다 속도가 55% 정도 느려진다.
        또한 일부 브라우저에서 제대로 작동하지 않는다는 자료도 있다. 
        그럼 정규표현식 없이 어떻게 사용할 것인가?
      */
      const charCountRefactWithFunc = (str) => {
        let result = {};

        for (let char of str) {
          if (isAlphaNumeric(char)) {
            char = char.toLowerCase();
            result[char] = ++result[char] || 1;
          }
        }

        return result;
      }
      
      const isAlphaNumeric = (char) => {
        let code = char.charCodeAt(0);
        if (!(code > 47 && code < 58) && // numeric (0-9)
            !(code > 64 && code < 91) && // upper alpha (A-Z)
            !(code > 96 && code < 123)) { // lower alpha (a-z)
              return false;
            }
        return true;
      }
    </script>

  <!-- 
    📌 Recap
    1. 문제를 이해한다. (+면접관에게 질문을 던져 문제를 더 정확히 이해하려는 노력 포함)
    2. 구체적인 예시를 살펴본다 (1. 간단예시, 2. 복잡예시)
    3. 세분화한다. (단계 세분화!!)
    4. 단순하게 해결한다
    5. 코드를 되돌아보고 리팩토링한다.
  -->
</body>
</html>